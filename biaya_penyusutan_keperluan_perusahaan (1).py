# -*- coding: utf-8 -*-
"""BIAYA PENYUSUTAN KEPERLUAN PERUSAHAAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nQm4HwT8xXluX4Rx-wFOzyq6nE3PPZAZ

# 1. Install library
(hanya dijalankan sekali jika library belum ada di environment)
"""

# Install library
!pip install pandas openpyxl

"""# 2. Import library utama
pandas digunakan untuk manipulasi data dan analisis dataset (membaca, membersihkan, mengolah)
"""

# 2. Import library
import pandas as pd

"""# 3. Load dataset (.xlsx)"""

# 3. Load dataset (.xlsx)
file_path = '/content/Biaya Penyusutan Kantor Divre Bulan Juli 2025.xlsx'
df = pd.read_excel(file_path)

"""# 4. Cek nama kolom agar tahu struktur dataset asli"""

# 4. (Optional) lihat nama kolom
print(df.columns)

"""# 5. Rename kolom agar lebih rapi
(hapus newline, kasih nama jelas)
"""

# Rename kolom agar lebih rapi
df = df.rename(columns={
    'No.\nUrut': 'No_Urut',
    'Golongan\nPenyusutan': 'Golongan_Penyusutan',
    'Nomor\nRekening': 'Nomor_Rekening',
    'Jenis\nAktiva Tetap': 'Jenis_Aktiva_Tetap',
    'Nomor\nAktiva Tetap': 'Nomor_Aktiva_Tetap',
    'Tahun\nPerolehan': 'Tahun_Perolehan',
    'Masa\nManfaat\n(Tahun)': 'Masa_Manfaat_Tahun',
    'Tarif\nPenyusutan\n(%)': 'Tarif_Penyusutan',
    'Nilai\nPerolehan': 'Nilai_Perolehan',
    'Nilai Buku\ns/d Bulan Lalu': 'Nilai_Buku_Bulan_Lalu',
    'Penyusutan\ns/d Bulan Lalu': 'Penyusutan_Bulan_Lalu',
    'Biaya Peny.\ndalam Bulan': 'Biaya_Penyusutan_Bulan',
    'Biaya Peny.\ns/d Bulan': 'Biaya_Penyusutan_Sampai_Bulan',
    'Akumulasi\nPenyusutan\ns/d Bulan': 'Akumulasi_Penyusutan',
    'Nilai Buku\ns/d Bulan ini': 'Nilai_Buku_Bulan_Ini',
    'Nomor\nRekening\nPenyusutan': 'Nomor_Rekening_Penyusutan'
})

df.head()

"""# 6. Mengecek ukuran dataset
(jumlah baris x kolom)
"""

df.shape

"""# 7. Mengecek tipe data tiap kolom
(numerik, object/string, datetime, dll)
"""

df.dtypes

"""# 8. Hapus baris yang mengandung kata "Subtotal"
karena kita tidak membutuhkan subtotal dalam dataset tersebut pada kolom Jenis_Aktiva_Tetap
"""

# --- Drop baris yang mengandung kata "Subtotal" pada kolom Jenis_Aktiva_Tetap (atau kolom lain yang berisi teks tersebut) ---
df = df[~df['Jenis_Aktiva_Tetap'].str.contains('Subtotal', case=False, na=False)]

"""# 9. Preview data lebih banyak (500 baris pertama)
untuk cek apakah masih ada baris "subtotal" dalam dataset tersebut
"""

df.head(500)

"""# 10. Hapus baris yang seluruh kolomnya NaN"""

# Hapus baris yang SEMUA kolomnya NaN
df = df.dropna(how='all')

"""# 11. Mengecek jumlah nilai NaN per kolom
untuk menganalisis ada berapa banyak NaN atau nilai kosong ditiap kolom
"""

# Mengecek jumlah nilai NaN per kolom
df.isna().sum()

"""# 12. Isi NaN pada kolom bertipe object/string dengan "-"
"""

# Isi NaN pada kolom bertipe object (string)
obj_cols = df.select_dtypes(include='object').columns
df[obj_cols] = df[obj_cols].fillna('-')

"""# 13. Ubah kolom Tahun_Perolehan menjadi hanya tahun (integer)"""

# Convert tahun_perolehan menjadi tahun (int)
df['Tahun_Perolehan'] = df['Tahun_Perolehan'].astype(int)

"""# 14. Isi NaN pada kolom numerik dengan nilai 0"""

# Pisahkan kolom numerik
num_cols = df.select_dtypes(include=['float64','int64']).columns

for col in num_cols:
    if df[col].isna().sum() > 0:
        if col in ['Nilai_Perolehan','Nilai_Buku_Bulan_Lalu','Nilai_Buku_Bulan_Ini',
                   'Biaya_Penyusutan_Bulan','Biaya_Penyusutan_Sampai_Bulan','Akumulasi_Penyusutan']:
            df[col] = df[col].fillna(df[col].median())
        elif col == 'Tahun_Perolehan':
            df[col] = df[col].fillna(df[col].mode()[0])
        else:
            df[col] = df[col].fillna(0)

# Hapus kolom yang konstan
for col in df.columns:
    if df[col].nunique() == 1:
        print(f"Dropping kolom konstan: {col}")
        df = df.drop(columns=[col])

"""# 15. (Optional) Cek kembali apakah masih ada NaN"""

# (Optional) Cek kembali apakah masih ada NaN
df.isna().sum()

"""# 16. Set opsi agar semua baris & kolom bisa ditampilkan"""

# agar semua baris dan kolom ditampilkan
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

# tampilkan seluruh dataframe
df

"""# 17. Cari kolom yang masih mengandung kata 'Subtotal'
(untuk double-check setelah cleaning)
"""

# mencari kolom mana yg mengandung kata 'Subtotal'
for col in df.columns:
    if df[col].astype(str).str.contains('Subtotal', case=False, na=False).any():
        print(col)

"""# 18. Hapus baris yang mengandung 'Subtotal' di kolom Nomor_Rekening"""

df = df[~df['Nomor_Rekening'].str.contains('Subtotal', case=False, na=False)]

"""# 19. Simpan dataset hasil cleaning ke file baru"""

# Simpan dataframe yang sudah bersih ke file baru
df.to_excel('dataset_bersih.xlsx', index=False)

"""# 20. Hapus baris terakhir jika mengandung kata "TOTAL"
karena kita akan menghitung sendiri Total-nya untuk memastikan kebenaran dari dataset yang sedang di analisis
"""

# hapus baris terakhir jika kolom object-nya berisi kata "TOTAL"
last_row = df.tail(1)
if last_row.select_dtypes(include='object').apply(lambda x: x.str.contains('total', case=False, na=False)).any(axis=1).iloc[0]:
    df = df.iloc[:-1]

"""# 21. Hitung total untuk cross-check dengan file original"""

total_nilai_perolehan = df['Nilai_Perolehan'].sum()
print(f"Total Nilai Perolehan = {total_nilai_perolehan:.2f}")

Total_Nilai_Buku_Bulan_Lalu = df['Nilai_Buku_Bulan_Lalu'].sum()
print(f"Total Nilai Buku Bulan Lalu = {Total_Nilai_Buku_Bulan_Lalu:.2f}")

Total_Penyusutan_Bulan_Lalu = df['Penyusutan_Bulan_Lalu'].sum()
print(f"Total Penyusutan Bulan Lalu = {Total_Penyusutan_Bulan_Lalu:.2f}")

Total_Biaya_Penyusutan_Bulan = df['Biaya_Penyusutan_Bulan'].sum()
print(f"Total Biaya Penyusutan Bulan = {Total_Biaya_Penyusutan_Bulan:.2f}")

Total_Biaya_Penyusutan_Sampai_Bulan = df['Biaya_Penyusutan_Sampai_Bulan'].sum()
print(f"Total Biaya Penyusutan Sampai Bulan = {Total_Biaya_Penyusutan_Sampai_Bulan:.2f}")

Total_Akumulasi_Penyusutan = df['Akumulasi_Penyusutan'].sum()
print(f"Total Akumulasi Penyusutan = {Total_Akumulasi_Penyusutan:.2f}")

Total_Nilai_Buku_Bulan_Ini = df['Nilai_Buku_Bulan_Ini'].sum()
print(f"Total Nilai Buku Bulan Ini = {Total_Nilai_Buku_Bulan_Ini:.2f}")

"""# 22. Total biaya penyusutan (bulan ini) per Jenis Aktiva"""

# Total biaya penyusutan (bulan ini) per Jenis Aktiva
biaya_per_jenis = (
    df.groupby('Jenis_Aktiva_Tetap')['Biaya_Penyusutan_Bulan']
    .sum()
    .sort_values(ascending=False)
)

print(biaya_per_jenis)

"""# 23. Hitung total biaya penyusutan per Jenis Aktiva (versi reset index)"""

biaya_per_jenis = (
    df.groupby('Jenis_Aktiva_Tetap', as_index=False)['Biaya_Penyusutan_Bulan']
    .sum()
    .rename(columns={'Biaya_Penyusutan_Bulan': 'Total_Biaya_Penyusutan'})
    .sort_values('Total_Biaya_Penyusutan', ascending=False)
)

biaya_per_jenis.head()

"""# 24. Visualisasi Top 10 Jenis Aktiva berdasarkan biaya penyusutan"""

# Hitung total biaya penyusutan per jenis aktiva
biaya_per_jenis = (
    df.groupby('Jenis_Aktiva_Tetap')['Biaya_Penyusutan_Bulan']
    .sum()
    .sort_values(ascending=False)
)

# Ambil Top 10
top10 = biaya_per_jenis.head(10)

# ----- Tentukan satuan otomatis (Rupiah / Juta / Miliar) -----
max_val = top10.max()

if max_val >= 1e9:
    divisor = 1e9
    label_satuan = 'Miliar Rupiah'
elif max_val >= 1e6:
    divisor = 1e6
    label_satuan = 'Juta Rupiah'
else:
    divisor = 1
    label_satuan = 'Rupiah'

# Konversi nilainya ke skala yang dipilih
top10_scaled = top10 / divisor

# ----- Plot -----
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
top10_scaled.plot(kind='bar')
plt.xlabel('Jenis Aktiva Tetap')
plt.ylabel(f'Total Biaya Penyusutan Bulan ({label_satuan})')
plt.title('Top 10 Jenis Aktiva Penyumbang Biaya Penyusutan Terbesar')
plt.xticks(rotation=30, ha='right')
plt.tight_layout()
plt.show()

"""# 25. Total biaya penyusutan per Golongan Penyusutan"""

# Total biaya penyusutan (bulan ini) per Golongan Penyusutan
biaya_per_golongan = (
    df.groupby('Golongan_Penyusutan')['Biaya_Penyusutan_Bulan']
    .sum()
    .sort_values(ascending=False)
)

print(biaya_per_golongan)

"""# 26. Visualisasi Top 10 Golongan Penyusutan"""

# Total biaya penyusutan per golongan
biaya_per_golongan = (
    df.groupby('Golongan_Penyusutan')['Biaya_Penyusutan_Bulan']
    .sum()
    .sort_values(ascending=False)
)

# Tentukan skala (juta atau miliar) secara otomatis
max_val = biaya_per_golongan.max()

if max_val >= 1e9:
    divisor = 1e9
    label_satuan = 'Miliar Rupiah'
elif max_val >= 1e6:
    divisor = 1e6
    label_satuan = 'Juta Rupiah'
else:
    divisor = 1
    label_satuan = 'Rupiah'

# Konversi nilainya ke skala yg dipilih
biaya_scaled = biaya_per_golongan / divisor

# Plot Top 10
top10_gol = biaya_scaled.head(10)

import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
top10_gol.plot(kind='bar')
plt.xlabel('Golongan Penyusutan')
plt.ylabel(f'Total Biaya Penyusutan Bulan ({label_satuan})')
plt.title('Top 10 Golongan Penyusutan Berdasarkan Biaya Penyusutan')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""# 27. Rata-rata nilai perolehan seluruh aset"""

# Rata-rata nilai perolehan seluruh aset
rata2_perolehan = df['Nilai_Perolehan'].mean()
rata_juta = rata2_perolehan / 1e6
print(f"Rata-rata Nilai Perolehan = {rata2_perolehan:.2f} Juta Rupiah")

"""# 28. Rata-rata nilai perolehan per jenis aktiva"""

# Rata-rata per jenis aktiva
rata_per_jenis = (
    df.groupby('Jenis_Aktiva_Tetap')['Nilai_Perolehan']
    .mean()
    .sort_values(ascending=False)
)

rata_per_jenis.head()

"""# 29. Rata-rata seluruh aset (versi ringkas dalam jutaan)"""

# Rata-rata seluruh aset (dalam jutaan rupiah)
rata_total = df['Nilai_Perolehan'].mean() / 1e6
print(f"Rata-rata Nilai Perolehan Seluruh Aset = {rata_total:.2f} Juta Rupiah")

"""# 30. Plot Top 10 rata-rata nilai perolehan per jenis aktiva"""

# Rata-rata Nilai Perolehan per Jenis Aktiva
rata_per_jenis = (
    df.groupby('Jenis_Aktiva_Tetap')['Nilai_Perolehan']
    .mean()
    .sort_values(ascending=False)
) / 1e9

print(rata_per_jenis.head(10))

# Plot Top 10 Rata-rata Nilai Perolehan per Jenis Aktiva
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
rata_per_jenis.head(10).plot(kind='bar')
plt.xlabel('Jenis Aktiva Tetap')
plt.ylabel('Rata-rata Nilai Perolehan (Miliar Rupiah)')
plt.title('Rata-rata Nilai Perolehan per Jenis Aktiva')
plt.xticks(rotation=30, ha='right')
plt.tight_layout()
plt.show()

"""# 31. Analisis rasio penyusutan (sudah berapa besar dibanding nilai buku)"""

# Mencari tahu Biaya Penyusutan yg telah terjadi mendekati milai perolehannya

# Buat kolom rasio (penyusutan sampai bulan ini dibanding nilai buku)
df['Rasio_Penyusutan'] = df['Biaya_Penyusutan_Sampai_Bulan'] / df['Nilai_Buku_Bulan_Ini']

# Urutkan dari rasio tertinggi (yang hampir habis umur manfaatnya)
df_sorted = df.sort_values('Rasio_Penyusutan', ascending=False)

#Tampilkan 10 aset dengan rasio tertinggi
df_sorted[['Jenis_Aktiva_Tetap', 'Biaya_Penyusutan_Sampai_Bulan', 'Nilai_Buku_Bulan_Ini', 'Rasio_Penyusutan']].head(10)

"""Penjelasan :

Untuk Laptop Acer: total penyusutan = 1.55 juta, nilai buku masih 354.035 → rasio = 4.38
Artinya sekitar 438% sudah terdepresiasi (dalam praktik, berarti aset sudah tua).

# 32. Visualisasi histogram distribusi rasio penyusutan
"""

# Pastikan kolom Rasio_Penyusutan sudah ada (kalau belum buat dulu seperti sebelumnya):
df['Rasio_Penyusutan'] = df['Biaya_Penyusutan_Sampai_Bulan'] / df['Nilai_Buku_Bulan_Ini']

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df['Rasio_Penyusutan'], bins=30)
plt.xlabel('Rasio Penyusutan (Biaya Penyusutan / Nilai Buku)')
plt.ylabel('Frekuensi (jumlah aset)')
plt.title('Histogram Distribusi Rasio Penyusutan Aset')
plt.tight_layout()
plt.show()

"""# 33. Histogram rasio penyusutan (tanpa outlier ekstrem)"""

# Ambil hanya aset dengan rasio > 0
rasio_positive = df[df['Rasio_Penyusutan'] > 0]['Rasio_Penyusutan']

# Batasi nilai hingga <20 supaya outlier ekstrem tidak mengganggu visual
rasio_filtered = rasio_positive[rasio_positive < 20]

import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
plt.hist(rasio_filtered, bins=30)
plt.xlabel('Rasio Penyusutan (< 20)')
plt.ylabel('Frekuensi (jumlah aset)')
plt.title('Distribusi Rasio Penyusutan Aset (tanpa outlier ekstrem)')
plt.tight_layout()
plt.show()

"""Dari hasil histogram tersebut bisa kamu baca:

*  Mayoritas aset memiliki rasio
penyusutan < 1 → artinya belum habis umur manfaatnya.

*  Ada beberapa aset dengan rasio di atas 4–5 → ini aset yang kemungkinan sudah “tua” dan perlu diganti.

*  Rentang 0.5 – 1 juga mulai muncul → aset yang mulai mendekati akhir umur.

# 34. Top 10 aset berdasarkan nilai perolehan
"""

top10_perolehan = (
    df.sort_values('Nilai_Perolehan', ascending=False)
    [['Jenis_Aktiva_Tetap', 'Nilai_Perolehan']]
    .head(10)
)

# ubah ke satuan miliar
top10_perolehan['Nilai_Perolehan_Miliar'] = top10_perolehan['Nilai_Perolehan'] / 1e9

top10_perolehan

"""# Visual 10 aset dengan nilai perolehan tertinggi (dalam Miliar)"""

# visual 10 aset dengan nilai perolehan tertinggi (dalam Miliar)

plt.figure(figsize=(10,6))
top10_perolehan.set_index('Jenis_Aktiva_Tetap')['Nilai_Perolehan_Miliar'].plot(kind='barh')
plt.xlabel('Nilai Perolehan (Miliar Rupiah)')
plt.ylabel('Top 10 Aset Berdasarkan Nilai Perolehan')
plt.tight_layout()
plt.show()

"""# 35. Top 10 aset berdasarkan Nilai Buku (bulan ini)"""

# To 10 aset dengan Nilai Buku

# Urutkan berdasarkan Nilai Buku (desc)
top10_buku = (
    df.sort_values('Nilai_Buku_Bulan_Ini', ascending=False)
    [['Jenis_Aktiva_Tetap', 'Nilai_Buku_Bulan_Ini']]
    .head(10)
)

#Konversi ke Miliar Rupiah
top10_buku['Nilai_Buku_Miliar'] = top10_buku['Nilai_Buku_Bulan_Ini'] / 1e9

top10_buku

"""# Visual top 10 aset dengan nilai Buku tertinggi (dalam Miliar)"""

# Visual top 10 aset dengan nilai buku tertinggi (dalam Miliar)

plt.figure(figsize=(10,6))
top10_buku.set_index('Jenis_Aktiva_Tetap')['Nilai_Buku_Miliar'].plot(kind='barh')
plt.xlabel('Nilai Buku s/d Bulan Ini (Miliar Rupiah)')
plt.title('Top 10 Aset Berdasarkan Nilai Buku s/d Bulan Ini')
plt.tight_layout()
plt.show()